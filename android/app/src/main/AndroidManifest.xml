<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    package="com.example.getinfo">

    <!-- io.flutter.app.FlutterApplication is an android.app.Application that
         calls FlutterMain.startInitialization(this); in its onCreate method.
         In most cases you can leave this as-is, but you if you want to provide
         additional functionality it is fine to subclass or reimplement
         FlutterApplication and put your custom class here. -->
    <uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED"/> //not need 
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/> // for fetch data
    <uses-permission android:name="android.permission.CHANGE_WIFI_STATE"/> //to access wifi
    <uses-permission android:name="android.permission.ACCESS_WIFI_STATE"/> // same
    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" /> // same
    <uses-feature android:name="android.hardware.wifi" /> //same
    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" /> //for location (not implement)
    <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" /> //same
    <uses-permission android:name="android.permission.INTERNET"/>
    <uses-permission android:name="android.permission.VIBRATE" />
    <uses-permission android:name="android.permission.SYSTEM_ALERT_WINDOW" /> // show pop up over other apps
    <uses-permission android:name="android.permission.REAL_GET_TASKS" /> // get running apps (but not working) 
    <uses-permission android:name="android.permission.GET_TASKS" /> //same
    <uses-permission android:name="android.permission.PACKAGE_USAGE_STATS" tools:ignore="ProtectedPermissions" /> // app usage
    <uses-permission android:name="android.permission.EXPAND_STATUS_BAR" />
    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
   


    
    <application
        android:name="io.flutter.app.FlutterApplication"
        android:label="getinfo"
        android:icon="@mipmap/ic_launcher">
       
        <activity
            android:name=".MainActivity"
            android:launchMode="singleTop"
            android:theme="@style/LaunchTheme"
            android:configChanges="orientation|keyboardHidden|keyboard|screenSize|locale|layoutDirection|fontScale|screenLayout|density|uiMode"
            android:hardwareAccelerated="true"
            android:windowSoftInputMode="adjustResize">
            <!-- This keeps the window background of the activity showing
                 until Flutter renders its first frame. It can be removed if
                 there is no splash screen (such as the default splash screen
                 defined in @style/LaunchTheme). -->
            

            <meta-data
                android:name="io.flutter.app.android.SplashScreenUntilFirstFrame"
                android:value="true" />
            <intent-filter>
                <action android:name="android.intent.action.MAIN"/>
                <category android:name="android.intent.category.LAUNCHER"/>
                <category android:name="android.intent.category.HOME" />
                <category android:name="android.intent.category.DEFAULT" />
                
            </intent-filter> 
        </activity>
         <service android:name=".BackgroundService" android:exported="false" /> 
         <receiver android:name=".MyReceiver"></receiver>
         <service android:name=".AlertService"/>
         <receiver 
         android:name=".MyDeviceAdminReceiver"
         android:permission="android.permission.BIND_DEVICE_ADMIN">
    <meta-data android:name="android.app.device_admin"
            android:resource="@xml/device_admin_uses_policies" />
    <intent-filter>
        <action android:name="android.app.action.DEVICE_ADMIN_ENABLED" />
    </intent-filter>
</receiver>
    </application>
</manifest>
